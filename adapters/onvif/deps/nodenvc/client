#!/usr/bin/env node
// -*- js -*-

var Q      = require("q");
var thrift = require("thrift");
var argv   = require("optimist").argv;

var OnvifAdapter = require("./gen-nodejs/OnvifAdapter");
var ttypes       = require("./gen-nodejs/service_types");

var transport = thrift.TBufferedTransport()
var protocol  = thrift.TBinaryProtocol()

// Create a Calculator client with the connection
var connection = thrift.createConnection("localhost", 6140, {
  transport : transport,
  protocol : protocol
});

connection.on('error', function(err) {
  console.log(JSON.stringify(err));
});

var client = thrift.createClient(OnvifAdapterClient, connection);

var promises = [];

if (argv.x) {
  var value = argv.x === 1 ? 1 : -1;
  var promise = Q.ninvoke(client, "moveX", value)
                 .then(function() {
                   var err = args[0];
                   var response = args[1];
                   console.log(JSON.stringify(err));
                 });
  promises.push(promise);
} else if (argv.y) {
  var value = argv.y === 1 ? 1 : -1;
  var promise = Q.ninvoke(client, "moveY", value)
                 .then(function(args) {
                   var err = args[0];
                   var response = args[1];
                   console.log(JSON.stringify(err));
                 });
  promises.push(promise);
} else if (argv.s) {
  var promise = Q.ninvoke(client, "stopXY")
                 .then(function(args) {
                   var err = args[0];
                   var response = args[1];
                   console.log(JSON.stringify(err));
                 });
  promises.push(promise);
} else if (argv.p) {
  var promise = Q.ninvoke(client, "getProperties")
                 .then(function(result) {
                   console.log("results" + JSON.stringify(result));
                 });
  promises.push(promise); 
}

Q.allSettled(promises)
 .then(function (results) {
   connection.end();
 });




